===== Version 3 =====

=== Q1 ===
SAME AS V2 :(

=== Q2 ===
SAME AS V2 :(

=== Q3 ===
Write a program that takes two command-line arguments, a string and a filename.
It should print all the lines in the file that contain the string.

When the lines are printed the occurrences of the string in the line should be surrounded by parentheses.

In other words, the program should behave like a very simple grep (no regexp) but add brackets.

You can assume the file exists and it is readable.

You can assume the string contains only alphanumeric characters, i.e. [a-zA-Z0-9].

For example, if your program was named a.out, this is how it should behave:

% cat >file
the
quick brown
fox jumps over the
lazy dog
% a.out file e
th(e)
fox jumps ov(e)r th(e)
% cat >poem
How much wood would a woodchuck chuck
if a woodchuck could chuck wood?
% a.out poem wood
How much (wood) would a (wood)chuck chuck
if a (wood)chuck could chuck (wood)?
% a.out poem h
How muc(h) wood would a woodc(h)uck c(h)uck
if a woodc(h)uck could c(h)uck wood?
% a.out poem o
H(o)w much w(o)(o)d w(o)uld a w(o)(o)dchuck chuck
if a w(o)(o)dchuck c(o)uld chuck w(o)(o)d?
% a.out poem How
(How) much wood would a woodchuck chuck
% a.out poem how

MY SOLUTION:
#!/usr/bin/perl -w
$file = $ARGV[0];
$word = $ARGV[1];
if (@ARGV != 2){
    die"Usage: <file> <string>";
}
open F, "<$file" or die "cannot open $file";
while ($line = <F>){
    if ($line =~ /$word/){
            $line =~ s/$word/($word)/g;
    }
    print $line;
}

~~~ Remember to use die for arguments and filters
if (@ARGV != 2){
    die"Usage: <file> <string>";
}
open F, "<$file" or die "cannot open $file";

=== Q4 ===
We have enrollment data where each line has this format:
    CourseCode|StudentID|FamilyName, GivenNames|Program|Gender
We wish to convert the data to this format:

    CourseCode|StudentID|GivenNames FamilyName|Program|Gender
Write a program which reads data in the first format from its standard input and writes it in the second format to its standard output.

MY ANSWER:
#!/usr/bin/perl -w
while ($line = <STDIN>){
    if ($line =~ /(.*\|)(.*)\,([^\|]*)(\|.*)/){
            $line = $1.$3." ".$2.$4;
    }
    print $line."\n";
}



=== Q5 ===
A university has a problem with students accumulating large library fines. The vice-chancellor has decided to expel the student with the largest total library fine. We need a program which tallies the library fines of students and prints the name of the student with the largest total library fine.
The input to this program will be a series of pairs of student names and library fines.

The output of this program will be a single student name and a total library fine.

At this university, students are identified by their given names, which are unique and consist only of lower case alphabetic letters.

At this university, library fines are always a small positive integer number of dollars.

Write a program which reads a series of pairs of student names and library fines from its standard input.

When the end of input is reached your program should print the student with the largest total library fine.

Your program should place no limit on the number of students and no limit on the number of fines.

There will be a penalty if your program places any fixed limit on the number of students or the number of fines.

Make your program behave exactly as indicated by the example below. For example:

Enter student name: fred
Enter library fine: 3
Enter student name: mary
Enter library fine: 7
Enter student name: fred
Enter library fine: 2
Enter student name: john
Enter library fine: 4
Enter student name: mary
Enter library fine: 1
Enter student name: fred
Enter library fine: 4
Enter student name: <control-d>
Expel fred whose library fines total $9
Note, the <control-d> in the example above indicates the user typing this key to indicate the end-of-input. This will not actually appear on the screen. What actually appears when the <control-d> key is typed varies between machines.

Your program does not have to print "<control-d>".

Your program can assume that student names consist only of lower case alphabetic characters, i.e. no space or punctuation characters.

Your program can assume that student names are at most 32 characters long.

Your program can assume that fines are always small postive integers.

Your program can assume that a student's total library fine will fit in an int.

Your program should place no limit on the number of students.

Your program should place no limit on the number of fines.

Your program can assume that there is always one student with the largest total library fine (no ties). In other words one student always has a total library fine larger than any other.

Your program can assume that there is at least one student with a library fine.

Your program can assume its input is correct.

No error checking is required.


MY ANSWER:
#!/usr/bin/perl -w
$name = "";
$fine = 0;
while (1){
    print "Enter student name: ";
    $name = <STDIN>;
    last if !defined $name;
    chomp $name;
    print "Enter library fine: ";
    $fine = <STDIN>;
    $total{$name}+= int($fine);
}
$largest = -1;
$expel = "";
foreach $student (keys %total){
    if ($total{$student}>$largest){
            $expel = $student;
            $largest = $total{$student};
    }
}

print "Expel $expel whose library fines total \$$largest\n";


~~~ end when keyboard interrupt
while (1) {
}
last if !defined $name; (break if the stdin is not defined)
