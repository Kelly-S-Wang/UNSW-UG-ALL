
---------------------------------------------------------------------------
--
-- intset.sql
--
-- COMP9315 Assignment 1
-- Moyao Wang (z5099162), Shan Wang (z5119666) (Group name WW)
-- Adding a Set Data Type to PostgreSQL
--
-- src/tutorial/intset.source
--
---------------------------------------------------------------------------



CREATE OR REPLACE FUNCTION intset_in(cstring)
    RETURNS intset
    AS '_OBJWD_/intset'
    LANGUAGE C IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION intset_out(intset)
    RETURNS cstring
    AS '_OBJWD_/intset'
    LANGUAGE C IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION intset_recv(internal)
    RETURNS intset
    AS '_OBJWD_/intset'
    LANGUAGE C IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION intset_send(intset)
    RETURNS bytea
    AS '_OBJWD_/intset'
    LANGUAGE C IMMUTABLE STRICT;

-- Create new type

CREATE TYPE intset (
    internallength = VARIABLE,
    input = intset_in,
    output = intset_out,
    receive = intset_recv,
    send = intset_send
);


-- define required operators

CREATE OR REPLACE FUNCTION intset_contains(integer, intset) RETURNS bool
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_cardinality(intset) RETURNS int
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_subset(intset, intset) RETURNS bool
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT; 

CREATE OR REPLACE FUNCTION intset_equal(intset, intset) RETURNS bool
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_union(intset, intset) RETURNS intset
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_intersection(intset, intset) RETURNS intset
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_disjunction(intset, intset) RETURNS intset
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION intset_difference(intset, intset) RETURNS intset
    AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;


CREATE OPERATOR <@ (
    leftarg = integer,
    rightarg = intset, 
    procedure = intset_contains
);

CREATE OPERATOR @ (
    rightarg = intset,
    procedure = intset_cardinality
);

CREATE OPERATOR @> (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_subset
);

CREATE OPERATOR = (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_equal
);

CREATE OPERATOR || (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_union
);

CREATE OPERATOR && (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_intersection
);

CREATE OPERATOR !! (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_disjunction
);

CREATE OPERATOR - (
    leftarg = intset,
    rightarg = intset,
    procedure = intset_difference
);


